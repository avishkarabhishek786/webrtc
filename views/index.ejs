<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>WebRTC</title>
</head>

<body>

    <h4>Chat Room</h4>

    <video id="myVideoTag" autoplay></video>
    <video id="theirVideoTag" autoplay></video>

    <div>
        <label for="myName">Your Name:</label>
        <input type="text" id="myName">

        <label for="myMessage">Message:</label>
        <input type="text" id="myMessage">

        <input type="submit" id="sendMessage">

        <div id="chatArea">Mesage Output: <br></div>

        <div id="signalling_area">Signalling messages: <br></div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io();

        var myVideoArea = document.querySelector("#myVideoTag");
        var theirVideoArea = document.querySelector("#theirVideoTag");
        var myName = document.querySelector("#myName");
        var myMessage = document.querySelector("#myMessage");
        var sendMessage = document.querySelector("#sendMessage");
        var chatArea = document.querySelector("#chatArea");
        var signallingArea = document.querySelector("#signalling_area");
        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";

        const configuration = {iceServers: [{url:'stun:stun.l.google.com:19302'}]};

        var rtcPeerConn;

        socket.on('connect', function () {
            console.log('Connected to server!');
            socket.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM}, function (err) {
                if (err) {
                    alert(err);
                }
                console.log('No error');
            });
        })

        socket.on('disconnect', function () {
            console.log('Disconnected to server!');
        }); 

        socket.emit('signal', {"type": "user_here", "message": "Are you ready for the call?", "room":SIGNAL_ROOM})

        socket.on('announce', function (data) {
            displayMessage(data.message);
        });
        
        socket.on('signalling_message', function (data) {
            displaySignalMessage("Signal received: "+data.message);

            // Setup the RTCPeerConnection if not already
            if (!rtcPeerConn) {
                startSignalling();

                //console.log("type: ",data.type); // SDP
                if (data.type != "user_here") {
                    var message = JSON.parse(data.message);
                    if (message.sdp) {
                        rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function() {
                            //if we received an offer we need to answer
                            if (rtcPeerConn.remoteDescription.type=='offer') {
                                rtcPeerConn.createAnswer(sendLocalDesc, logError);
                            }
                        }, logError);
                    } else {
                        rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                    }
                }
            }

        });

        function startSignalling() {
            displaySignalMessage("Starting signalling...");

            //rtcPeerConn = new webkitRTCPeerConnection(configuration);
            rtcPeerConn = new mozRTCPeerConnection(configuration);

            // Send any ice candidates to other peer
            rtcPeerConn.onicecandidate = function(evt) {
                if (evt.candidate) {
                    socket.emit('signal', {
                        "type": "ice candidate",
                        "message": JSON.stringify({'candidate':evt.candidate}),
                        "room": SIGNAL_ROOM
                    });
                    displaySignalMessage("completed that ice candidate...");
                }
            }

            // let 'negotiationneeded event trigger offer generation
            rtcPeerConn.onnegotiationneeded = function() {
                displaySignalMessage("onnegotiationneeded called...");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            }

            // once remote stream arrives , show it in the remote  video element
            rtcPeerConn.addTrack = function(e) {
                displaySignalMessage("going to add their stream...");
                //theirVideoArea.src = URL.createObjectURL(e.stream);
                theirVideoArea.srcObject = e.stream;
            }

            // get a local stream, then it in our video tag  and add it to  be sent
            navigator.getUserMedia = navigator.getUserMedia ||
                                     navigator.webkitGetUserMedia ||
                                     navigator.mozGetUserMedia;

            navigator.getUserMedia({
                'audio': true,      
                'video': true
            }, function (stream) {
                displaySignalMessage("going to display my stream...");
                //myVideoArea.src = URL.createObjectURL(stream);
                myVideoArea.srcObject = stream;
                rtcPeerConn.addStream(stream);
            }, logError);

        }

        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function() {
                displaySignalMessage("sending local description...");
                socket.emit('signal', {
                    "type":"SDP",
                    "message": JSON.stringify({'sdp': rtcPeerConn.localDescription}),
                    "room": SIGNAL_ROOM
                }, logError);
            });
        }

        function logError(error) {
            displaySignalMessage(error.name + ': '+ error.message);
        }

        function displayMessage(message) {
            chatArea.innerHTML = chatArea.innerHTML + "<br>" + message;
        }
        
        function displaySignalMessage(message) {
            signallingArea.innerHTML = signallingArea.innerHTML + "<br>" + message;
        }

        socket.on('message', function(data) {
            displayMessage(data.author + ': ' + data.message)
        });

        sendMessage.addEventListener("click", function(e) {
            socket.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
            e.preventDefault();
        }, false);

    </script>

</body>

</html>