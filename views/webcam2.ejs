<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <h3>Webcam</h3>

    <video id="localVideo" playsinline autoplay muted></video>
    <video id="remoteVideo" playsinline autoplay></video>

    <div>
        <button id="startButton">Start</button>
        <button id="callButton">Call</button>
        <button id="hangupButton">Hang Up</button>
    </div>

    <div id="chatArea">Mesage Output: <br></div>

    <div id="signalling_area">Signalling messages: <br></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        'use strict';

        var socket = io();

        const startButton = document.getElementById('startButton');
        const callButton = document.getElementById('callButton');
        const hangupButton = document.getElementById('hangupButton');
        //callButton.disabled = true;
        //hangupButton.disabled = true;
        let localStream;
        let pc;
        //let pc2;
        const offerOptions = {
            offerToReceiveAudio: 1,
            offerToReceiveVideo: 1
        };
        let startTime;

        var chatArea = document.querySelector("#chatArea");
        var signallingArea = document.querySelector("#signalling_area");

        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        //var rtcPeerConn;

        socket.on('connect', function () {
            console.log('Connected to server!');

            startButton.onclick = start;
            callButton.onclick = call;
            hangupButton.onclick = hangup;

            socket.emit('ready', {
                "chat_room": ROOM,
                "signal_room": SIGNAL_ROOM
            }, function (err) {
                if (err) {
                    alert(err);
                }
                console.log('No error');
            });
        })

        socket.on('disconnect', function () {
            console.log('Disconnected to server!');
        });

        socket.emit('signal', {
            "type": "user_here",
            "message": "Are you ready for the call?",
            "room": SIGNAL_ROOM
        })

        socket.on('signalling_message', function (data) {
            displaySignalMessage("Signal received: " + data.message);

            // Setup the pc if not already
            if (!pc) {
                start();
                call();

                //console.log("type: ",data.type); // SDP
                if (data.type != "user_here") {
                    var message = JSON.parse(data.message);
                    if (message.sdp) {
                        pc.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                            //if we received an offer we need to answer
                            if (pc.remoteDescription.type == 'offer') {
                                pc.createAnswer(onCreateOfferSuccess, logError);
                            }
                        }, logError);
                    } else {
                        pc.addIceCandidate(new RTCIceCandidate(message.candidate));
                    }
                }
            }

        });


        function start() {
            console.log('Requesting local stream');
            //startButton.disabled = true;
            navigator.mediaDevices
                .getUserMedia({
                    audio: false,
                    video: true
                })
                .then(gotStream)
                .catch(e => alert(`getUserMedia() error: ${e.name}`));
        }

        function call() {
            //callButton.disabled = true;
            //hangupButton.disabled = false;
            console.log('Starting call');
            startTime = window.performance.now();
            const videoTracks = localStream.getVideoTracks();
            const audioTracks = localStream.getAudioTracks();
            if (videoTracks.length > 0) {
                console.log(`Using video device: ${videoTracks[0].label}`);
            }
            if (audioTracks.length > 0) {
                console.log(`Using audio device: ${audioTracks[0].label}`);
            }

            const servers = {
                iceServers: [
                {url: 'stun:stun.l.google.com:19302'},
                {url: 'stun:stun1.l.google.com:19302'},
                {url: 'stun:stun2.l.google.com:19302'},
                {url: 'stun:stun3.l.google.com:19302'},
                {url: 'stun:stun4.l.google.com:19302'},
                {
                    'url': 'turn:numb.viagenie.ca',
                    'credential': 'pass123',
                    'username': 'sinha.abhishek123@yahoo.com'
                },
                {
                    'urls': 'turn:13.250.13.83:3478?transport=udp',
                    'credential': 'YzYNCouZM1mhqhmseWk6',
                    'username': 'YzYNCouZM1mhqhmseWk6'
                },
                {
                    'urls': 'turn:192.158.29.39:3478?transport=tcp',
                    'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    'username': '28224511:1379330808'
                },
                {
                    'url': 'turn:numb.viagenie.ca',
                    'credential': 'muazkh',
                    'username': 'webrtc@live.com'
                },
                {
                    'url': 'turn:192.158.29.39:3478?transport=udp',
                    'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    'username': '28224511:1379330808'
                },
                {
                    'url': 'turn:192.158.29.39:3478?transport=tcp',
                    'credential': 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
                    'username': '28224511:1379330808'
                },
                {
                    'url': 'turn:turn.bistri.com:80',
                    'credential': 'homeo',
                    'username': 'homeo'
                },
                {
                    'url': 'turn:turn.anyfirewall.com:443?transport=tcp',
                    'credential': 'webrtc',
                    'username': 'webrtc'
                },
                {
                    'url': 'turn:13.250.13.83:3478?transport=udp',
                    'credential': 'YzYNCouZM1mhqhmseWk6',
                    'username': 'YzYNCouZM1mhqhmseWk6'
                }
                ]
            };

            pc = new RTCPeerConnection(servers);
            console.log('Created local peer connection object pc', pc);
            pc.onicecandidate = e => onIceCandidate(pc, e);
            //pc2 = new RTCPeerConnection(servers);
            //console.log('Created remote peer connection object pc2', pc2);
            //pc2.onicecandidate = e => onIceCandidate(pc2, e);

            pc.oniceconnectionstatechange = e => onIceStateChange(pc, e);
            //pc2.oniceconnectionstatechange = e => onIceStateChange(pc2, e);

            pc.ontrack = gotRemoteStream;

            localStream.getTracks().forEach(track => pc.addTrack(track, localStream));
            console.log('Added local stream to pc');

            pc.onnegotiationneeded = () => {
                console.log('pc createOffer start');
                pc.createOffer(offerOptions).then(onCreateOfferSuccess, onCreateSessionDescriptionError);
            }

        }

        // function getName(pc) {
        //     return (pc === pc) ? 'pc' : 'pc2';
        // }

        // function getOtherPc(pc) {
        //     return (pc === pc) ? pc2 : pc;
        // }

        function gotStream(stream) {
            console.log('Received local stream');
            console.log(stream);
            localVideo.srcObject = stream;
            localStream = stream;
            callButton.disabled = false;
        }

        function onIceCandidate(pc, event) {
            pc.addIceCandidate(event.candidate)
                .then(() => onAddIceCandidateSuccess(pc, event), err => onAddIceCandidateError(pc, err));
            //console.log(`${getName(pc)} ICE candidate:\n${event.candidate ? event.candidate.candidate : '(null)'}`);
        }

        function onAddIceCandidateSuccess(pc, evt) {
            socket.emit('signal', {
                "type": "ice candidate",
                "message": JSON.stringify({
                    'candidate': evt.candidate
                }),
                "room": SIGNAL_ROOM
            });
            //console.log(`${getName(pc)} addIceCandidate success`);
        }

        function onAddIceCandidateError(pc, error) {
            //console.log(`${getName(pc)} failed to add ICE Candidate: ${error.toString()}`);
        }

        function onIceStateChange(pc, event) {
            if (pc) {
                socket.emit('signal', {
                    "type": "ice candidate",
                    "message": JSON.stringify({
                        'sdp': pc.localDescription
                    }),
                    "room": SIGNAL_ROOM
                }, logError);
                //console.log(`${getName(pc)} ICE state: ${pc.iceConnectionState}`);
                console.log('ICE state change event: ', event);
            }
        }

        function gotRemoteStream(e) {
            if (remoteVideo.srcObject !== e.streams[0]) {
                remoteVideo.srcObject = e.streams[0];
                //remoteVideo.src = window.URL.createObjectURL(e.streams[0]);
                console.log('pc received remote stream');
                console.log(e.streams[0]);
            }
        }

        function onCreateOfferSuccess(desc) {
            console.log(`Offer from pc ${desc.sdp}`);
            console.log('pc setLocalDescription start');
            pc.setLocalDescription(desc).then(() => onSetLocalSuccess(pc), onSetSessionDescriptionError);
            console.log('pc2 setRemoteDescription start');
            //pc2.setRemoteDescription(desc).then(() => onSetRemoteSuccess(pc2), onSetSessionDescriptionError);
            console.log('pc2 createAnswer start');
            // Since the 'remote' side has no media stream we need
            // to pass in the right constraints in order for it to
            // accept the incoming offer of audio and video.
            //pc2.createAnswer().then(onCreateAnswerSuccess, onCreateSessionDescriptionError);
        }

        function logError(error) {
            console.error(error);
        }

        function onSetLocalSuccess(pc) {
            socket.emit('signal', {
                "type": "SDP",
                "message": JSON.stringify({
                    'sdp': pc.localDescription
                }),
                "room": SIGNAL_ROOM
            }, logError);
            //console.log(`${getName(pc)} setLocalDescription complete`);
        }

        function onSetRemoteSuccess(pc) {
            socket.emit('signal', {
                "type": "SDP",
                "message": JSON.stringify({
                    'sdp': pc.remoteDescription
                }),
                "room": SIGNAL_ROOM
            }, logError);
            //console.log(`${getName(pc)} setRemoteDescription complete`);
        }

        function onCreateSessionDescriptionError(error) {
            console.log(`Failed to create session description: ${error.toString()}`);
        }

        function onSetSessionDescriptionError(error) {
            console.log(`Failed to set session description: ${error.toString()}`);
        }

        function onCreateAnswerSuccess(desc) {
            //console.log(`Answer from pc2:\n${desc.sdp}`);
            //console.log('pc2 setLocalDescription start');
            //pc2.setLocalDescription(desc).then(() => onSetLocalSuccess(pc2), onSetSessionDescriptionError);
            console.log('pc setRemoteDescription start');
            pc.setRemoteDescription(desc).then(() => onSetRemoteSuccess(pc), onSetSessionDescriptionError);
        }

        socket.on('announce', function (data) {
            displayMessage(data.message);
        });

        function displayMessage(message) {
            console.log(message);
            chatArea.innerHTML += chatArea.innerHTML + "<br>" + message;
        }

        function displaySignalMessage(message) {
            console.log(message);
            signallingArea.innerHTML += signallingArea.innerHTML + "<br>" + message;
        }

        function hangup() {
            console.log('Ending call');
            pc.close();
            //pc2.close();
            pc = null;
            //pc2 = null;
            //hangupButton.disabled = true;
            //callButton.disabled = false;
        }
    </script>

</body>

</html>