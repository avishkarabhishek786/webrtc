<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <h3>Webcam</h3>

    <video id="selfView" playsinline autoplay muted></video>
    <video id="remoteView" playsinline autoplay></video>

    <div>
        <button id="startButton">Start</button>
        <button id="callButton">Call</button>
        <button id="hangupButton">Hang Up</button>
    </div>

    <div id="chatArea">Mesage Output: <br></div>

    <div id="signalling_area">Signalling messages: <br></div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const selfView = document.querySelector("#selfView");
        const remoteView = document.querySelector("#remoteView");

        const startButton = document.getElementById('startButton');
        // const callButton = document.getElementById('callButton');
        // const hangupButton = document.getElementById('hangupButton');

        var chatArea = document.querySelector("#chatArea");
        var signallingArea = document.querySelector("#signalling_area");

        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        let pc;

        // Signaling Channel (PubNub, Firebase, Socket.io, etc.)
        function SignalingChannel(peerConnection) {
            // Setup the signaling channel here
            this.peerConnection = peerConnection;

            this.peerConnection.on('connect', function () {
                console.log('Connected to server!');

                startButton.onclick = start;
                // callButton.onclick = call;
                // hangupButton.onclick = hangup;

            });

            this.peerConnection.emit('ready', {
                "chat_room": ROOM,
                "signal_room": SIGNAL_ROOM
            }, logError);

            this.peerConnection.on('disconnect', function () {
                console.log('Disconnected to server!');
            });

        }

        SignalingChannel.prototype.send = function (message) {
            // Send messages using your favorite real-time network
            //this.peerConnection.emit(name, message, logError);
            this.peerConnection.emit('message', message, logError);
        };

        // SignalingChannel.prototype.onmessage = function (message) {
        //     // If we get a sdp we have to sign and return it
        //     if (message.sdp != null) {
        //         var that = this;
        //         this.peerConnection.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
        //             that.peerConnection.createAnswer(function (description) {
        //                 that.send(description);
        //             });
        //         });
        //     } else {
        //         this.peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
        //     }
        // };

        const socket = io();
        const signaling = new SignalingChannel(socket); // handles JSON.stringify/parse
        const constraints = {
            audio: false,
            video: true
        };
        const configuration = {
            iceServers: [{
                urls: 'stun:stun.l.google.com:19302'
            }]
        };

        // call start() to initiate
        async function start() {
            pc = new RTCPeerConnection(configuration);

            // send any ice candidates to the other peer
            pc.onicecandidate = (event) => {
                signaling.send(JSON.stringify({
                    candidate: event.candidate
                }));
                console.log("ice candidate sent: ", JSON.stringify({
                    candidate: event.candidate
                }));

            };


            var isNegotiating = false; // Workaround for Chrome: skip nested negotiations

            // let the "negotiationneeded" event trigger offer generation
            pc.onnegotiationneeded = async () => {
                if (isNegotiating) {
                    console.log("SKIP nested negotiations");
                    return;
                }
                isNegotiating = true;
                try {
                    await pc.setLocalDescription(await pc.createOffer());
                    // send the offer to the other peer
                    signaling.send(JSON.stringify({
                        desc: pc.localDescription
                    }));
                    console.log("sent local desc:  ", JSON.stringify({
                        desc: pc.localDescription
                    }));

                } catch (err) {
                    console.error(err);
                }
            };

            pc.onsignalingstatechange = (e) => { // Workaround for Chrome: skip nested negotiations
                isNegotiating = (pc.signalingState != "stable");
            }

            try {
                // get a local stream, show it in a self-view and add it to be sent
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: false,
                    video: true
                });
                selfView.srcObject = stream;

                stream.getTracks().forEach((track) => pc.addTrack(track, stream));
                // Render the media even before ontrack fires.
                console.log("media render...");

                remoteView.srcObject = new MediaStream(pc.getReceivers().map((r) => r.track));
            } catch (err) {
                console.error(err);
            }
        };

        signaling.onmessage = async (event) => {
            if (!pc) start();

            try {
                //console.log(typeof event);
                //console.log(event);

                const message = JSON.parse(event.data);

                if (message.desc) {
                    const desc = message.desc;
                    console.log("desc", desc);

                    // if we get an offer, we need to reply with an answer
                    if (desc.type == 'offer') {
                        console.log("offer");

                        await pc.setRemoteDescription(desc);
                        await pc.setLocalDescription(await pc.createAnswer());
                        signaling.send(JSON.stringify({
                            desc: pc.localDescription
                        }));
                    } else {
                        console.log("answer", desc);

                        await pc.setRemoteDescription(desc);
                    }
                } else {
                    console.log("ice candidate", message.candidate);

                    if (message.candidate) {
                        await pc.addIceCandidate(message.candidate);
                    }
                }
            } catch (err) {
                console.error(err);
            }
        };


        function logError(error) {
            console.error(error);
        }

        // sendMessage.addEventListener("click", function(e) {
        //     socket.emit('send', {"author":myName.value, "message":myMessage.value, "room":ROOM});
        //     e.preventDefault();
        // }, false);

        // Socket calls

        socket.on('message', (params) => {
            console.log("io message");
            signaling.onmessage(params);
        });
    </script>

</body>

</html>