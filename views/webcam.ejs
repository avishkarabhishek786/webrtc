<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <h3>Webcam</h3>

    <video id="selfView" playsinline autoplay muted></video>
    <video id="remoteView" playsinline autoplay></video>

    <div>
        <button id="startButton">Start Video Call</button>
        <button id="hangupButton">Hang Up</button>
    </div>

    <div id="chatArea">Mesage Output: <br></div>

    <div id="signalling_area">Signalling messages: <br></div>

    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const selfView = document.querySelector("#selfView");
        const remoteView = document.querySelector("#remoteView");

        const startButton = document.getElementById('startButton');
        const hangupButton = document.getElementById('hangupButton');

        var chatArea = document.querySelector("#chatArea");
        var signallingArea = document.querySelector("#signalling_area");

        //var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";

        const socket = io();

        socket.on('connect', function () {
            console.log('Connected to server!');
            startButton.onclick = start;
            hangupButton.onclick = closeVideoCall;
        });

        socket.emit('ready', {
            "signal_room": SIGNAL_ROOM
        }, logError);

        socket.on('disconnect', function () {
            console.log('Disconnected to server!');
        });

        //const signaling = new SignalingChannel(); // handles JSON.stringify/parse
        const constraints = {
            audio: true,
            video: true
        };
        const configuration = {
            iceServers: [{
                urls: 'stun:stun.l.google.com:19302'
            }]
        };
        const pc = new RTCPeerConnection(configuration);

        // send any ice candidates to the other peer
        pc.onicecandidate = ({
            candidate
        }) => socket.emit('message', {
            candidate
        });

        // let the "negotiationneeded" event trigger offer generation
        pc.onnegotiationneeded = async () => {
            try {
                await pc.setLocalDescription(await pc.createOffer());
                // send the offer to the other peer
                socket.emit('message', {
                    desc: pc.localDescription
                });
            } catch (err) {
                console.error(err);
            }
        };

        // once media for a remote track arrives, show it in the remote video element
        pc.ontrack = (event) => {
            // don't set srcObject again if it is already set.
            if (remoteView.srcObject) return;
            remoteView.srcObject = event.streams[0];
        };

        // call start() to initiate
        async function start() {
            try {
                // get a local stream, show it in a self-view and add it to be sent
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                stream.getTracks().forEach((track) => pc.addTrack(track, stream));
                selfView.srcObject = stream;
            } catch (err) {
                console.error(err);
            }
        }

        socket.on('message', async ({
            desc,
            candidate
        }) => {
            try {
                if (desc) {
                    // if we get an offer, we need to reply with an answer
                    if (desc.type == 'offer') {
                        console.log('signalingState: ' + pc.signalingState);

                        // workaround for chrome signalingState error (https://stackoverflow.com/questions/51099707/peerconnection-cannot-create-an-answer)
                        if (pc.signalingState != "stable") return;
                        console.log(" crossed: " + pc.signalingState);

                        try {
                            await pc.setRemoteDescription(desc);
                            const stream = await navigator.mediaDevices.getUserMedia(constraints);
                            stream.getTracks().forEach((track) => pc.addTrack(track, stream));
                            await pc.setLocalDescription(await pc.createAnswer());
                            socket.emit('message', {
                                desc: pc.localDescription
                            });
                        } catch (error) {
                            console.log(error);
                        }
                    } else if (desc.type == 'answer') {
                        await pc.setRemoteDescription(desc);
                    } else {
                        console.log('Unsupported SDP type. Your code may differ here.');
                    }
                } else if (candidate) {
                    await pc.addIceCandidate(candidate);
                }
            } catch (err) {
                console.error(err);
            }
        });

        function logError(error) {
            console.error(error);
        }

        // hang up
        hangupButton.addEventListener('click', function () {
            socket.emit('endcall', {
                room: SIGNAL_ROOM,
                message: "User left the call or got disconnected."
            });
            closeVideoCall();
        });

        function closeVideoCall() {

            if (pc) {
                pc.ontrack = null;
                pc.onremovetrack = null;
                pc.onremovestream = null;
                pc.onnicecandidate = null;
                pc.oniceconnectionstatechange = null;
                pc.onsignalingstatechange = null;
                pc.onicegatheringstatechange = null;
                pc.onnotificationneeded = null;

                if (remoteView.srcObject) {
                    remoteView.srcObject.getTracks().forEach(track => track.stop());
                }

                if (selfView.srcObject) {
                    selfView.srcObject.getTracks().forEach(track => track.stop());
                }

                pc.close();
                //pc = null;
            }

            remoteView.removeAttribute("src");
            remoteView.removeAttribute("srcObject");
            selfView.removeAttribute("src");
            remoteView.removeAttribute("srcObject");

            hangupButton.disabled = true;
        }
    </script>

</body>

</html>