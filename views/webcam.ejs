<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <h3>Webcam</h3>

    <video id="localVideo" playsinline autoplay muted></video>
    <video id="remoteVideo" playsinline autoplay></video>

    <div>
        <button id="startButton">Start</button>
        <button id="callButton">Call</button>
        <button id="hangupButton">Hang Up</button>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        'use strict';

        var socket = io();

        const startButton = document.getElementById('startButton');
        const callButton = document.getElementById('callButton');
        const hangupButton = document.getElementById('hangupButton');
        callButton.disabled = true;
        hangupButton.disabled = true;
        let localStream;
        let pc1;
        let pc2;
        const offerOptions = {
            offerToReceiveAudio: 1,
            offerToReceiveVideo: 1
        };
        let startTime;

        var ROOM = "chat";
        var SIGNAL_ROOM = "signal_room";
        //var rtcPeerConn;

        socket.on('connect', function () {
            console.log('Connected to server!');

            startButton.onclick = start;
            callButton.onclick = call;
            hangupButton.onclick = hangup;

            socket.emit('ready', {
                "chat_room": ROOM,
                "signal_room": SIGNAL_ROOM
            }, function (err) {
                if (err) {
                    alert(err);
                }
                console.log('No error');
            });
        })

        socket.on('disconnect', function () {
            console.log('Disconnected to server!');
        });

        socket.emit('signal', {
            "type": "user_here",
            "message": "Are you ready for the call?",
            "room": SIGNAL_ROOM
        })


        function start() {
            console.log('Requesting local stream');
            startButton.disabled = true;
            navigator.mediaDevices
                .getUserMedia({
                    audio: false,
                    video: true
                })
                .then(gotStream)
                .catch(e => alert(`getUserMedia() error: ${e.name}`));
        }

        function call() {
            callButton.disabled = true;
            hangupButton.disabled = false;
            console.log('Starting call');
            startTime = window.performance.now();
            const videoTracks = localStream.getVideoTracks();
            const audioTracks = localStream.getAudioTracks();
            if (videoTracks.length > 0) {
                console.log(`Using video device: ${videoTracks[0].label}`);
            }
            if (audioTracks.length > 0) {
                console.log(`Using audio device: ${audioTracks[0].label}`);
            }

            const servers = {
                iceServers: [{
                    url: 'stun:stun.l.google.com:19302'
                }]
            };

            pc1 = new RTCPeerConnection(servers);
            console.log('Created local peer connection object pc1');
            pc1.onicecandidate = e => onIceCandidate(pc1, e);
            pc2 = new RTCPeerConnection(servers);
            console.log('Created remote peer connection object pc2');
            pc2.onicecandidate = e => onIceCandidate(pc2, e);

            pc1.oniceconnectionstatechange = e => onIceStateChange(pc1, e);
            pc2.oniceconnectionstatechange = e => onIceStateChange(pc2, e);

            pc2.ontrack = gotRemoteStream;

            localStream.getTracks().forEach(track => pc1.addTrack(track, localStream));
            console.log('Added local stream to pc1');

            console.log('pc1 createOffer start');
            pc1.createOffer(offerOptions).then(onCreateOfferSuccess, onCreateSessionDescriptionError);

        }

        function hangup() {
            //
        }

        function getName(pc) {
            return (pc === pc1) ? 'pc1' : 'pc2';
        }

        function getOtherPc(pc) {
            return (pc === pc1) ? pc2 : pc1;
        }

        function gotStream(stream) {
            console.log('Received local stream');
            localVideo.srcObject = stream;
            localStream = stream;
            callButton.disabled = false;
        }

        function onIceCandidate(pc, event) {
            getOtherPc(pc).addIceCandidate(event.candidate)
                .then(() => onAddIceCandidateSuccess(pc, event), err => onAddIceCandidateError(pc, err));
            console.log(`${getName(pc)} ICE candidate:\n${event.candidate ? event.candidate.candidate : '(null)'}`);
        }

        function onAddIceCandidateSuccess(pc, evt) {
            socket.emit('signal', {
                "type": "ice candidate",
                "message": JSON.stringify({
                    'candidate': evt.candidate
                }),
                "room": SIGNAL_ROOM
            });
            console.log(`${getName(pc)} addIceCandidate success`);
        }

        function onAddIceCandidateError(pc, error) {
            console.log(`${getName(pc)} failed to add ICE Candidate: ${error.toString()}`);
        }

        function onIceStateChange(pc, event) {
            if (pc) {
                console.log(`${getName(pc)} ICE state: ${pc.iceConnectionState}`);
                console.log('ICE state change event: ', event);
            }
        }

        function gotRemoteStream(e) {
            if (remoteVideo.srcObject !== e.streams[0]) {
                remoteVideo.srcObject = e.streams[0];
                console.log('pc2 received remote stream');
            }
        }

        function onCreateOfferSuccess(desc) {
            console.log(`Offer from pc1 ${desc.sdp}`);
            console.log('pc1 setLocalDescription start');
            pc1.setLocalDescription(desc).then(() => onSetLocalSuccess(pc1), onSetSessionDescriptionError);
            console.log('pc2 setRemoteDescription start');
            pc2.setRemoteDescription(desc).then(() => onSetRemoteSuccess(pc2), onSetSessionDescriptionError);
            console.log('pc2 createAnswer start');
            // Since the 'remote' side has no media stream we need
            // to pass in the right constraints in order for it to
            // accept the incoming offer of audio and video.
            pc2.createAnswer().then(onCreateAnswerSuccess, onCreateSessionDescriptionError);
        }

        function logError(error) {
            console.error(error);
        }

        function onSetLocalSuccess(pc) {
            socket.emit('signal', {
                "type": "SDP",
                "message": JSON.stringify({
                    'sdp': pc.localDescription
                }),
                "room": SIGNAL_ROOM
            }, logError);
            console.log(`${getName(pc)} setLocalDescription complete`);
        }

        function onSetRemoteSuccess(pc) {
            socket.emit('signal', {
                "type": "SDP",
                "message": JSON.stringify({
                    'sdp': pc.remoteDescription
                }),
                "room": SIGNAL_ROOM
            }, logError);
            console.log(`${getName(pc)} setRemoteDescription complete`);
        }

        function onCreateSessionDescriptionError(error) {
            console.log(`Failed to create session description: ${error.toString()}`);
        }

        function onSetSessionDescriptionError(error) {
            console.log(`Failed to set session description: ${error.toString()}`);
        }

        function onCreateAnswerSuccess(desc) {
            console.log(`Answer from pc2:\n${desc.sdp}`);
            console.log('pc2 setLocalDescription start');
            pc2.setLocalDescription(desc).then(() => onSetLocalSuccess(pc2), onSetSessionDescriptionError);
            console.log('pc1 setRemoteDescription start');
            pc1.setRemoteDescription(desc).then(() => onSetRemoteSuccess(pc1), onSetSessionDescriptionError);
        }

        function hangup() {
            console.log('Ending call');
            pc1.close();
            pc2.close();
            pc1 = null;
            pc2 = null;
            hangupButton.disabled = true;
            callButton.disabled = false;
        }
    </script>

</body>

</html>